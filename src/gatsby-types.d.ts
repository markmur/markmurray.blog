/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fields: Maybe<MarkdownRemarkFields>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsFieldSelector>;
  readonly fileAbsolutePath: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFields = {
  readonly pinned: Maybe<Scalars['Boolean']>;
  readonly readingTime: Maybe<MarkdownRemarkFieldsReadingTime>;
  readonly slug: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsFieldSelector = {
  readonly pinned: InputMaybe<FieldSelectorEnum>;
  readonly readingTime: InputMaybe<MarkdownRemarkFieldsReadingTimeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFieldsFilterInput = {
  readonly pinned: InputMaybe<BooleanQueryOperatorInput>;
  readonly readingTime: InputMaybe<MarkdownRemarkFieldsReadingTimeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsReadingTime = {
  readonly minutes: Maybe<Scalars['Float']>;
  readonly text: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownRemarkFieldsReadingTimeFieldSelector = {
  readonly minutes: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly time: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFieldsReadingTimeFilterInput = {
  readonly minutes: InputMaybe<FloatQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownRemarkFieldsReadingTimeSortInput = {
  readonly minutes: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly time: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFieldsSortInput = {
  readonly pinned: InputMaybe<SortOrderEnum>;
  readonly readingTime: InputMaybe<MarkdownRemarkFieldsReadingTimeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly cta: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly github_url: Maybe<Scalars['String']>;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly id: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly image_url: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly pinned: Maybe<Scalars['Boolean']>;
  readonly private: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly templateKey: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly cta: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly github_url: InputMaybe<FieldSelectorEnum>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly image_url: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly pinned: InputMaybe<FieldSelectorEnum>;
  readonly private: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly templateKey: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly cta: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly github_url: InputMaybe<StringQueryOperatorInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly image_url: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly pinned: InputMaybe<BooleanQueryOperatorInput>;
  readonly private: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly templateKey: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly cta: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly github_url: InputMaybe<SortOrderEnum>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly image_url: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly pinned: InputMaybe<SortOrderEnum>;
  readonly private: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly templateKey: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsSortInput>;
  readonly fileAbsolutePath: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allShopifyCollection: ShopifyCollectionConnection;
  readonly allShopifyExternalVideo: ShopifyExternalVideoConnection;
  readonly allShopifyMedia: ShopifyMediaConnection;
  readonly allShopifyMediaImage: ShopifyMediaImageConnection;
  readonly allShopifyMetafield: ShopifyMetafieldConnection;
  readonly allShopifyModel3D: ShopifyModel3dConnection;
  readonly allShopifyProduct: ShopifyProductConnection;
  readonly allShopifyProductVariant: ShopifyProductVariantConnection;
  readonly allShopifyVideo: ShopifyVideoConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly shopifyCollection: Maybe<ShopifyCollection>;
  readonly shopifyExternalVideo: Maybe<ShopifyExternalVideo>;
  readonly shopifyMedia: Maybe<ShopifyMedia>;
  readonly shopifyMediaImage: Maybe<ShopifyMediaImage>;
  readonly shopifyMetafield: Maybe<ShopifyMetafield>;
  readonly shopifyModel3D: Maybe<ShopifyModel3d>;
  readonly shopifyProduct: Maybe<ShopifyProduct>;
  readonly shopifyProductVariant: Maybe<ShopifyProductVariant>;
  readonly shopifyVideo: Maybe<ShopifyVideo>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allShopifyCollectionArgs = {
  filter: InputMaybe<ShopifyCollectionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionSortInput>>>;
};


type Query_allShopifyExternalVideoArgs = {
  filter: InputMaybe<ShopifyExternalVideoFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyExternalVideoSortInput>>>;
};


type Query_allShopifyMediaArgs = {
  filter: InputMaybe<ShopifyMediaFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaSortInput>>>;
};


type Query_allShopifyMediaImageArgs = {
  filter: InputMaybe<ShopifyMediaImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaImageSortInput>>>;
};


type Query_allShopifyMetafieldArgs = {
  filter: InputMaybe<ShopifyMetafieldFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMetafieldSortInput>>>;
};


type Query_allShopifyModel3DArgs = {
  filter: InputMaybe<ShopifyModel3dFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyModel3dSortInput>>>;
};


type Query_allShopifyProductArgs = {
  filter: InputMaybe<ShopifyProductFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyProductSortInput>>>;
};


type Query_allShopifyProductVariantArgs = {
  filter: InputMaybe<ShopifyProductVariantFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyProductVariantSortInput>>>;
};


type Query_allShopifyVideoArgs = {
  filter: InputMaybe<ShopifyVideoFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ShopifyVideoSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_shopifyCollectionArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  descriptionHtml: InputMaybe<StringQueryOperatorInput>;
  feedback: InputMaybe<ShopifyResourceFeedbackFilterInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ShopifyImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  metafield: InputMaybe<ShopifyMetafieldFilterInput>;
  metafields: InputMaybe<ShopifyMetafieldFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  products: InputMaybe<ShopifyProductFilterListInput>;
  productsCount: InputMaybe<IntQueryOperatorInput>;
  ruleSet: InputMaybe<ShopifyCollectionRuleSetFilterInput>;
  seo: InputMaybe<ShopifySEOFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  sortOrder: InputMaybe<ShopifyCollectionSortOrderQueryOperatorInput>;
  storefrontId: InputMaybe<StringQueryOperatorInput>;
  templateSuffix: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_shopifyExternalVideoArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  embeddedUrl: InputMaybe<StringQueryOperatorInput>;
  host: InputMaybe<ShopifyMediaHostQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};


type Query_shopifyMediaArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};


type Query_shopifyMediaImageArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  fileErrors: InputMaybe<ShopifyFileErrorFilterListInput>;
  fileStatus: InputMaybe<ShopifyFileStatusQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ShopifyImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};


type Query_shopifyMetafieldArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  key: InputMaybe<StringQueryOperatorInput>;
  legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  namespace: InputMaybe<StringQueryOperatorInput>;
  ownerType: InputMaybe<ShopifyMetafieldOwnerTypeQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  value: InputMaybe<StringQueryOperatorInput>;
  valueType: InputMaybe<StringQueryOperatorInput>;
};


type Query_shopifyModel3DArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  originalSource: InputMaybe<ShopifyModel3dSourceFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  sources: InputMaybe<ShopifyModel3dSourceFilterListInput>;
  status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};


type Query_shopifyProductArgs = {
  _featuredMedia: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  collections: InputMaybe<ShopifyCollectionFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  descriptionHtml: InputMaybe<StringQueryOperatorInput>;
  featuredImage: InputMaybe<ShopifyImageFilterInput>;
  featuredMedia: InputMaybe<ShopifyMediaFilterInput>;
  feedback: InputMaybe<ShopifyResourceFeedbackFilterInput>;
  giftCardTemplateSuffix: InputMaybe<StringQueryOperatorInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  hasOnlyDefaultVariant: InputMaybe<BooleanQueryOperatorInput>;
  hasOutOfStockVariants: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isGiftCard: InputMaybe<BooleanQueryOperatorInput>;
  legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  media: InputMaybe<ShopifyMediaFilterListInput>;
  mediaCount: InputMaybe<IntQueryOperatorInput>;
  metafield: InputMaybe<ShopifyMetafieldFilterInput>;
  metafields: InputMaybe<ShopifyMetafieldFilterListInput>;
  onlineStorePreviewUrl: InputMaybe<StringQueryOperatorInput>;
  onlineStoreUrl: InputMaybe<StringQueryOperatorInput>;
  options: InputMaybe<ShopifyProductOptionFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  priceRange: InputMaybe<ShopifyProductPriceRangeFilterInput>;
  priceRangeV2: InputMaybe<ShopifyProductPriceRangeV2FilterInput>;
  productType: InputMaybe<StringQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  requiresSellingPlan: InputMaybe<BooleanQueryOperatorInput>;
  sellingPlanGroupCount: InputMaybe<IntQueryOperatorInput>;
  seo: InputMaybe<ShopifySEOFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  status: InputMaybe<ShopifyProductStatusQueryOperatorInput>;
  storefrontId: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  templateSuffix: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  totalInventory: InputMaybe<IntQueryOperatorInput>;
  totalVariants: InputMaybe<IntQueryOperatorInput>;
  tracksInventory: InputMaybe<BooleanQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  variants: InputMaybe<ShopifyProductVariantFilterListInput>;
  vendor: InputMaybe<StringQueryOperatorInput>;
};


type Query_shopifyProductVariantArgs = {
  _product: InputMaybe<StringQueryOperatorInput>;
  availableForSale: InputMaybe<BooleanQueryOperatorInput>;
  barcode: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  compareAtPrice: InputMaybe<FloatQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  displayName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ShopifyImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  inventoryPolicy: InputMaybe<ShopifyProductVariantInventoryPolicyQueryOperatorInput>;
  inventoryQuantity: InputMaybe<IntQueryOperatorInput>;
  legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  media: InputMaybe<ShopifyMediaFilterListInput>;
  metafield: InputMaybe<ShopifyMetafieldFilterInput>;
  metafields: InputMaybe<ShopifyMetafieldFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  position: InputMaybe<IntQueryOperatorInput>;
  presentmentPrices: InputMaybe<ShopifyProductVariantPricePairFilterListInput>;
  price: InputMaybe<FloatQueryOperatorInput>;
  product: InputMaybe<ShopifyProductFilterInput>;
  requiresShipping: InputMaybe<BooleanQueryOperatorInput>;
  selectedOptions: InputMaybe<ShopifySelectedOptionFilterListInput>;
  sellingPlanGroupCount: InputMaybe<IntQueryOperatorInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  sku: InputMaybe<StringQueryOperatorInput>;
  storefrontId: InputMaybe<StringQueryOperatorInput>;
  taxCode: InputMaybe<StringQueryOperatorInput>;
  taxable: InputMaybe<BooleanQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  weight: InputMaybe<FloatQueryOperatorInput>;
  weightUnit: InputMaybe<ShopifyWeightUnitQueryOperatorInput>;
};


type Query_shopifyVideoArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  originalSource: InputMaybe<ShopifyVideoSourceFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  shopifyId: InputMaybe<StringQueryOperatorInput>;
  sources: InputMaybe<ShopifyVideoSourceFilterListInput>;
  status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyApp = {
  readonly shopifyId: Scalars['String'];
};

type ShopifyAppFeedback = {
  readonly app: ShopifyApp;
  readonly link: Maybe<ShopifyLink>;
  readonly messages: ReadonlyArray<ShopifyUserError>;
};

type ShopifyAppFeedbackFieldSelector = {
  readonly app: InputMaybe<ShopifyAppFieldSelector>;
  readonly link: InputMaybe<ShopifyLinkFieldSelector>;
  readonly messages: InputMaybe<ShopifyUserErrorFieldSelector>;
};

type ShopifyAppFeedbackFilterInput = {
  readonly app: InputMaybe<ShopifyAppFilterInput>;
  readonly link: InputMaybe<ShopifyLinkFilterInput>;
  readonly messages: InputMaybe<ShopifyUserErrorFilterListInput>;
};

type ShopifyAppFeedbackFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyAppFeedbackFilterInput>;
};

type ShopifyAppFeedbackSortInput = {
  readonly app: InputMaybe<ShopifyAppSortInput>;
  readonly link: InputMaybe<ShopifyLinkSortInput>;
  readonly messages: InputMaybe<ShopifyUserErrorSortInput>;
};

type ShopifyAppFieldSelector = {
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
};

type ShopifyAppFilterInput = {
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyAppSortInput = {
  readonly shopifyId: InputMaybe<SortOrderEnum>;
};

type ShopifyCollection = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Scalars['String'];
  readonly descriptionHtml: Scalars['String'];
  readonly feedback: Maybe<ShopifyResourceFeedback>;
  readonly handle: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<ShopifyImage>;
  readonly internal: Internal;
  readonly legacyResourceId: Scalars['String'];
  readonly metafield: Maybe<ShopifyMetafield>;
  readonly metafields: ReadonlyArray<ShopifyMetafield>;
  readonly parent: Maybe<Node>;
  readonly products: ReadonlyArray<ShopifyProduct>;
  readonly productsCount: Scalars['Int'];
  readonly ruleSet: Maybe<ShopifyCollectionRuleSet>;
  readonly seo: ShopifySEO;
  readonly shopifyId: Scalars['String'];
  readonly sortOrder: ShopifyCollectionSortOrder;
  readonly storefrontId: Scalars['String'];
  readonly templateSuffix: Maybe<Scalars['String']>;
  readonly title: Scalars['String'];
  readonly updatedAt: Scalars['Date'];
};


type ShopifyCollection_metafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


type ShopifyCollection_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ShopifyCollectionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyCollectionEdge>;
  readonly group: ReadonlyArray<ShopifyCollectionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyCollection>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyCollectionConnection_distinctArgs = {
  field: ShopifyCollectionFieldSelector;
};


type ShopifyCollectionConnection_groupArgs = {
  field: ShopifyCollectionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyCollectionConnection_maxArgs = {
  field: ShopifyCollectionFieldSelector;
};


type ShopifyCollectionConnection_minArgs = {
  field: ShopifyCollectionFieldSelector;
};


type ShopifyCollectionConnection_sumArgs = {
  field: ShopifyCollectionFieldSelector;
};

type ShopifyCollectionEdge = {
  readonly next: Maybe<ShopifyCollection>;
  readonly node: ShopifyCollection;
  readonly previous: Maybe<ShopifyCollection>;
};

type ShopifyCollectionFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly descriptionHtml: InputMaybe<FieldSelectorEnum>;
  readonly feedback: InputMaybe<ShopifyResourceFeedbackFieldSelector>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ShopifyImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly legacyResourceId: InputMaybe<FieldSelectorEnum>;
  readonly metafield: InputMaybe<ShopifyMetafieldFieldSelector>;
  readonly metafields: InputMaybe<ShopifyMetafieldFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly products: InputMaybe<ShopifyProductFieldSelector>;
  readonly productsCount: InputMaybe<FieldSelectorEnum>;
  readonly ruleSet: InputMaybe<ShopifyCollectionRuleSetFieldSelector>;
  readonly seo: InputMaybe<ShopifySEOFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly sortOrder: InputMaybe<FieldSelectorEnum>;
  readonly storefrontId: InputMaybe<FieldSelectorEnum>;
  readonly templateSuffix: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ShopifyCollectionFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly descriptionHtml: InputMaybe<StringQueryOperatorInput>;
  readonly feedback: InputMaybe<ShopifyResourceFeedbackFilterInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ShopifyImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  readonly metafield: InputMaybe<ShopifyMetafieldFilterInput>;
  readonly metafields: InputMaybe<ShopifyMetafieldFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly products: InputMaybe<ShopifyProductFilterListInput>;
  readonly productsCount: InputMaybe<IntQueryOperatorInput>;
  readonly ruleSet: InputMaybe<ShopifyCollectionRuleSetFilterInput>;
  readonly seo: InputMaybe<ShopifySEOFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly sortOrder: InputMaybe<ShopifyCollectionSortOrderQueryOperatorInput>;
  readonly storefrontId: InputMaybe<StringQueryOperatorInput>;
  readonly templateSuffix: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ShopifyCollectionFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyCollectionFilterInput>;
};

type ShopifyCollectionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyCollectionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyCollectionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyCollection>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyCollectionGroupConnection_distinctArgs = {
  field: ShopifyCollectionFieldSelector;
};


type ShopifyCollectionGroupConnection_groupArgs = {
  field: ShopifyCollectionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyCollectionGroupConnection_maxArgs = {
  field: ShopifyCollectionFieldSelector;
};


type ShopifyCollectionGroupConnection_minArgs = {
  field: ShopifyCollectionFieldSelector;
};


type ShopifyCollectionGroupConnection_sumArgs = {
  field: ShopifyCollectionFieldSelector;
};

type ShopifyCollectionRule = {
  readonly column: ShopifyCollectionRuleColumn;
  readonly condition: Scalars['String'];
  readonly relation: ShopifyCollectionRuleRelation;
};

type ShopifyCollectionRuleColumn =
  | 'IS_PRICE_REDUCED'
  | 'TAG'
  | 'TITLE'
  | 'TYPE'
  | 'VARIANT_COMPARE_AT_PRICE'
  | 'VARIANT_INVENTORY'
  | 'VARIANT_PRICE'
  | 'VARIANT_TITLE'
  | 'VARIANT_WEIGHT'
  | 'VENDOR';

type ShopifyCollectionRuleColumnQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyCollectionRuleColumn>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionRuleColumn>>>;
  readonly ne: InputMaybe<ShopifyCollectionRuleColumn>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionRuleColumn>>>;
};

type ShopifyCollectionRuleFieldSelector = {
  readonly column: InputMaybe<FieldSelectorEnum>;
  readonly condition: InputMaybe<FieldSelectorEnum>;
  readonly relation: InputMaybe<FieldSelectorEnum>;
};

type ShopifyCollectionRuleFilterInput = {
  readonly column: InputMaybe<ShopifyCollectionRuleColumnQueryOperatorInput>;
  readonly condition: InputMaybe<StringQueryOperatorInput>;
  readonly relation: InputMaybe<ShopifyCollectionRuleRelationQueryOperatorInput>;
};

type ShopifyCollectionRuleFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyCollectionRuleFilterInput>;
};

type ShopifyCollectionRuleRelation =
  | 'CONTAINS'
  | 'ENDS_WITH'
  | 'EQUALS'
  | 'GREATER_THAN'
  | 'IS_NOT_SET'
  | 'IS_SET'
  | 'LESS_THAN'
  | 'NOT_CONTAINS'
  | 'NOT_EQUALS'
  | 'STARTS_WITH';

type ShopifyCollectionRuleRelationQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyCollectionRuleRelation>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionRuleRelation>>>;
  readonly ne: InputMaybe<ShopifyCollectionRuleRelation>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionRuleRelation>>>;
};

type ShopifyCollectionRuleSet = {
  readonly appliedDisjunctively: Scalars['Boolean'];
  readonly rules: ReadonlyArray<ShopifyCollectionRule>;
};

type ShopifyCollectionRuleSetFieldSelector = {
  readonly appliedDisjunctively: InputMaybe<FieldSelectorEnum>;
  readonly rules: InputMaybe<ShopifyCollectionRuleFieldSelector>;
};

type ShopifyCollectionRuleSetFilterInput = {
  readonly appliedDisjunctively: InputMaybe<BooleanQueryOperatorInput>;
  readonly rules: InputMaybe<ShopifyCollectionRuleFilterListInput>;
};

type ShopifyCollectionRuleSetSortInput = {
  readonly appliedDisjunctively: InputMaybe<SortOrderEnum>;
  readonly rules: InputMaybe<ShopifyCollectionRuleSortInput>;
};

type ShopifyCollectionRuleSortInput = {
  readonly column: InputMaybe<SortOrderEnum>;
  readonly condition: InputMaybe<SortOrderEnum>;
  readonly relation: InputMaybe<SortOrderEnum>;
};

type ShopifyCollectionSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly descriptionHtml: InputMaybe<SortOrderEnum>;
  readonly feedback: InputMaybe<ShopifyResourceFeedbackSortInput>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ShopifyImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly legacyResourceId: InputMaybe<SortOrderEnum>;
  readonly metafield: InputMaybe<ShopifyMetafieldSortInput>;
  readonly metafields: InputMaybe<ShopifyMetafieldSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly products: InputMaybe<ShopifyProductSortInput>;
  readonly productsCount: InputMaybe<SortOrderEnum>;
  readonly ruleSet: InputMaybe<ShopifyCollectionRuleSetSortInput>;
  readonly seo: InputMaybe<ShopifySEOSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly sortOrder: InputMaybe<SortOrderEnum>;
  readonly storefrontId: InputMaybe<SortOrderEnum>;
  readonly templateSuffix: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ShopifyCollectionSortOrder =
  | 'ALPHA_ASC'
  | 'ALPHA_DESC'
  | 'BEST_SELLING'
  | 'CREATED'
  | 'CREATED_DESC'
  | 'MANUAL'
  | 'PRICE_ASC'
  | 'PRICE_DESC';

type ShopifyCollectionSortOrderQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyCollectionSortOrder>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionSortOrder>>>;
  readonly ne: InputMaybe<ShopifyCollectionSortOrder>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCollectionSortOrder>>>;
};

type ShopifyCountryCode =
  | 'AC'
  | 'AD'
  | 'AE'
  | 'AF'
  | 'AG'
  | 'AI'
  | 'AL'
  | 'AM'
  | 'AN'
  | 'AO'
  | 'AR'
  | 'AT'
  | 'AU'
  | 'AW'
  | 'AX'
  | 'AZ'
  | 'BA'
  | 'BB'
  | 'BD'
  | 'BE'
  | 'BF'
  | 'BG'
  | 'BH'
  | 'BI'
  | 'BJ'
  | 'BL'
  | 'BM'
  | 'BN'
  | 'BO'
  | 'BQ'
  | 'BR'
  | 'BS'
  | 'BT'
  | 'BV'
  | 'BW'
  | 'BY'
  | 'BZ'
  | 'CA'
  | 'CC'
  | 'CD'
  | 'CF'
  | 'CG'
  | 'CH'
  | 'CI'
  | 'CK'
  | 'CL'
  | 'CM'
  | 'CN'
  | 'CO'
  | 'CR'
  | 'CU'
  | 'CV'
  | 'CW'
  | 'CX'
  | 'CY'
  | 'CZ'
  | 'DE'
  | 'DJ'
  | 'DK'
  | 'DM'
  | 'DO'
  | 'DZ'
  | 'EC'
  | 'EE'
  | 'EG'
  | 'EH'
  | 'ER'
  | 'ES'
  | 'ET'
  | 'FI'
  | 'FJ'
  | 'FK'
  | 'FO'
  | 'FR'
  | 'GA'
  | 'GB'
  | 'GD'
  | 'GE'
  | 'GF'
  | 'GG'
  | 'GH'
  | 'GI'
  | 'GL'
  | 'GM'
  | 'GN'
  | 'GP'
  | 'GQ'
  | 'GR'
  | 'GS'
  | 'GT'
  | 'GW'
  | 'GY'
  | 'HK'
  | 'HM'
  | 'HN'
  | 'HR'
  | 'HT'
  | 'HU'
  | 'ID'
  | 'IE'
  | 'IL'
  | 'IM'
  | 'IN'
  | 'IO'
  | 'IQ'
  | 'IR'
  | 'IS'
  | 'IT'
  | 'JE'
  | 'JM'
  | 'JO'
  | 'JP'
  | 'KE'
  | 'KG'
  | 'KH'
  | 'KI'
  | 'KM'
  | 'KN'
  | 'KP'
  | 'KR'
  | 'KW'
  | 'KY'
  | 'KZ'
  | 'LA'
  | 'LB'
  | 'LC'
  | 'LI'
  | 'LK'
  | 'LR'
  | 'LS'
  | 'LT'
  | 'LU'
  | 'LV'
  | 'LY'
  | 'MA'
  | 'MC'
  | 'MD'
  | 'ME'
  | 'MF'
  | 'MG'
  | 'MK'
  | 'ML'
  | 'MM'
  | 'MN'
  | 'MO'
  | 'MQ'
  | 'MR'
  | 'MS'
  | 'MT'
  | 'MU'
  | 'MV'
  | 'MW'
  | 'MX'
  | 'MY'
  | 'MZ'
  | 'NA'
  | 'NC'
  | 'NE'
  | 'NF'
  | 'NG'
  | 'NI'
  | 'NL'
  | 'NO'
  | 'NP'
  | 'NR'
  | 'NU'
  | 'NZ'
  | 'OM'
  | 'PA'
  | 'PE'
  | 'PF'
  | 'PG'
  | 'PH'
  | 'PK'
  | 'PL'
  | 'PM'
  | 'PN'
  | 'PS'
  | 'PT'
  | 'PY'
  | 'QA'
  | 'RE'
  | 'RO'
  | 'RS'
  | 'RU'
  | 'RW'
  | 'SA'
  | 'SB'
  | 'SC'
  | 'SD'
  | 'SE'
  | 'SG'
  | 'SH'
  | 'SI'
  | 'SJ'
  | 'SK'
  | 'SL'
  | 'SM'
  | 'SN'
  | 'SO'
  | 'SR'
  | 'SS'
  | 'ST'
  | 'SV'
  | 'SX'
  | 'SY'
  | 'SZ'
  | 'TA'
  | 'TC'
  | 'TD'
  | 'TF'
  | 'TG'
  | 'TH'
  | 'TJ'
  | 'TK'
  | 'TL'
  | 'TM'
  | 'TN'
  | 'TO'
  | 'TR'
  | 'TT'
  | 'TV'
  | 'TW'
  | 'TZ'
  | 'UA'
  | 'UG'
  | 'UM'
  | 'US'
  | 'UY'
  | 'UZ'
  | 'VA'
  | 'VC'
  | 'VE'
  | 'VG'
  | 'VN'
  | 'VU'
  | 'WF'
  | 'WS'
  | 'XK'
  | 'YE'
  | 'YT'
  | 'ZA'
  | 'ZM'
  | 'ZW'
  | 'ZZ';

type ShopifyCurrencyCode =
  | 'AED'
  | 'AFN'
  | 'ALL'
  | 'AMD'
  | 'ANG'
  | 'AOA'
  | 'ARS'
  | 'AUD'
  | 'AWG'
  | 'AZN'
  | 'BAM'
  | 'BBD'
  | 'BDT'
  | 'BGN'
  | 'BHD'
  | 'BIF'
  | 'BMD'
  | 'BND'
  | 'BOB'
  | 'BRL'
  | 'BSD'
  | 'BTN'
  | 'BWP'
  | 'BYN'
  | 'BYR'
  | 'BZD'
  | 'CAD'
  | 'CDF'
  | 'CHF'
  | 'CLP'
  | 'CNY'
  | 'COP'
  | 'CRC'
  | 'CVE'
  | 'CZK'
  | 'DJF'
  | 'DKK'
  | 'DOP'
  | 'DZD'
  | 'EGP'
  | 'ERN'
  | 'ETB'
  | 'EUR'
  | 'FJD'
  | 'FKP'
  | 'GBP'
  | 'GEL'
  | 'GHS'
  | 'GIP'
  | 'GMD'
  | 'GNF'
  | 'GTQ'
  | 'GYD'
  | 'HKD'
  | 'HNL'
  | 'HRK'
  | 'HTG'
  | 'HUF'
  | 'IDR'
  | 'ILS'
  | 'INR'
  | 'IQD'
  | 'IRR'
  | 'ISK'
  | 'JEP'
  | 'JMD'
  | 'JOD'
  | 'JPY'
  | 'KES'
  | 'KGS'
  | 'KHR'
  | 'KID'
  | 'KMF'
  | 'KRW'
  | 'KWD'
  | 'KYD'
  | 'KZT'
  | 'LAK'
  | 'LBP'
  | 'LKR'
  | 'LRD'
  | 'LSL'
  | 'LTL'
  | 'LVL'
  | 'LYD'
  | 'MAD'
  | 'MDL'
  | 'MGA'
  | 'MKD'
  | 'MMK'
  | 'MNT'
  | 'MOP'
  | 'MRU'
  | 'MUR'
  | 'MVR'
  | 'MWK'
  | 'MXN'
  | 'MYR'
  | 'MZN'
  | 'NAD'
  | 'NGN'
  | 'NIO'
  | 'NOK'
  | 'NPR'
  | 'NZD'
  | 'OMR'
  | 'PAB'
  | 'PEN'
  | 'PGK'
  | 'PHP'
  | 'PKR'
  | 'PLN'
  | 'PYG'
  | 'QAR'
  | 'RON'
  | 'RSD'
  | 'RUB'
  | 'RWF'
  | 'SAR'
  | 'SBD'
  | 'SCR'
  | 'SDG'
  | 'SEK'
  | 'SGD'
  | 'SHP'
  | 'SLL'
  | 'SOS'
  | 'SRD'
  | 'SSP'
  | 'STD'
  | 'SYP'
  | 'SZL'
  | 'THB'
  | 'TJS'
  | 'TMT'
  | 'TND'
  | 'TOP'
  | 'TRY'
  | 'TTD'
  | 'TWD'
  | 'TZS'
  | 'UAH'
  | 'UGX'
  | 'USD'
  | 'UYU'
  | 'UZS'
  | 'VEF'
  | 'VES'
  | 'VND'
  | 'VUV'
  | 'WST'
  | 'XAF'
  | 'XCD'
  | 'XOF'
  | 'XPF'
  | 'XXX'
  | 'YER'
  | 'ZAR'
  | 'ZMW';

type ShopifyCurrencyCodeQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyCurrencyCode>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCurrencyCode>>>;
  readonly ne: InputMaybe<ShopifyCurrencyCode>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyCurrencyCode>>>;
};

type ShopifyEditableProperty = {
  readonly locked: Scalars['Boolean'];
  readonly reason: Maybe<Scalars['String']>;
};

type ShopifyExternalVideo = Node & ShopifyMedia & {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly embeddedUrl: Scalars['String'];
  readonly host: ShopifyMediaHost;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mediaContentType: ShopifyMediaContentType;
  readonly mediaErrors: ReadonlyArray<ShopifyMediaError>;
  readonly parent: Maybe<Node>;
  readonly preview: Maybe<ShopifyMediaPreviewImage>;
  readonly shopifyId: Scalars['String'];
  readonly status: ShopifyMediaStatus;
};

type ShopifyExternalVideoConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyExternalVideoEdge>;
  readonly group: ReadonlyArray<ShopifyExternalVideoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyExternalVideo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyExternalVideoConnection_distinctArgs = {
  field: ShopifyExternalVideoFieldSelector;
};


type ShopifyExternalVideoConnection_groupArgs = {
  field: ShopifyExternalVideoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyExternalVideoConnection_maxArgs = {
  field: ShopifyExternalVideoFieldSelector;
};


type ShopifyExternalVideoConnection_minArgs = {
  field: ShopifyExternalVideoFieldSelector;
};


type ShopifyExternalVideoConnection_sumArgs = {
  field: ShopifyExternalVideoFieldSelector;
};

type ShopifyExternalVideoEdge = {
  readonly next: Maybe<ShopifyExternalVideo>;
  readonly node: ShopifyExternalVideo;
  readonly previous: Maybe<ShopifyExternalVideo>;
};

type ShopifyExternalVideoFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly embeddedUrl: InputMaybe<FieldSelectorEnum>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mediaContentType: InputMaybe<FieldSelectorEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly status: InputMaybe<FieldSelectorEnum>;
};

type ShopifyExternalVideoFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly embeddedUrl: InputMaybe<StringQueryOperatorInput>;
  readonly host: InputMaybe<ShopifyMediaHostQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};

type ShopifyExternalVideoGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyExternalVideoEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyExternalVideoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyExternalVideo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyExternalVideoGroupConnection_distinctArgs = {
  field: ShopifyExternalVideoFieldSelector;
};


type ShopifyExternalVideoGroupConnection_groupArgs = {
  field: ShopifyExternalVideoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyExternalVideoGroupConnection_maxArgs = {
  field: ShopifyExternalVideoFieldSelector;
};


type ShopifyExternalVideoGroupConnection_minArgs = {
  field: ShopifyExternalVideoFieldSelector;
};


type ShopifyExternalVideoGroupConnection_sumArgs = {
  field: ShopifyExternalVideoFieldSelector;
};

type ShopifyExternalVideoSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly embeddedUrl: InputMaybe<SortOrderEnum>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mediaContentType: InputMaybe<SortOrderEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly status: InputMaybe<SortOrderEnum>;
};

type ShopifyFileError = {
  readonly code: ShopifyFileErrorCode;
  readonly details: Maybe<Scalars['String']>;
  readonly message: Scalars['String'];
};

type ShopifyFileErrorCode =
  | 'EXTERNAL_VIDEO_EMBED_DISABLED'
  | 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING'
  | 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO'
  | 'EXTERNAL_VIDEO_NOT_FOUND'
  | 'EXTERNAL_VIDEO_UNLISTED'
  | 'FILE_STORAGE_LIMIT_EXCEEDED'
  | 'GENERIC_FILE_DOWNLOAD_FAILURE'
  | 'GENERIC_FILE_INVALID_SIZE'
  | 'IMAGE_DOWNLOAD_FAILURE'
  | 'IMAGE_PROCESSING_FAILURE'
  | 'INVALID_IMAGE_ASPECT_RATIO'
  | 'INVALID_IMAGE_FILE_SIZE'
  | 'INVALID_IMAGE_RESOLUTION'
  | 'INVALID_SIGNED_URL'
  | 'MEDIA_TIMEOUT_ERROR'
  | 'MODEL3D_GLB_OUTPUT_CREATION_ERROR'
  | 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR'
  | 'MODEL3D_THUMBNAIL_GENERATION_ERROR'
  | 'MODEL3D_VALIDATION_ERROR'
  | 'UNKNOWN'
  | 'UNSUPPORTED_IMAGE_FILE_TYPE'
  | 'VIDEO_INVALID_FILETYPE_ERROR'
  | 'VIDEO_MAX_DURATION_ERROR'
  | 'VIDEO_MAX_HEIGHT_ERROR'
  | 'VIDEO_MAX_WIDTH_ERROR'
  | 'VIDEO_METADATA_READ_ERROR'
  | 'VIDEO_MIN_DURATION_ERROR'
  | 'VIDEO_MIN_HEIGHT_ERROR'
  | 'VIDEO_MIN_WIDTH_ERROR'
  | 'VIDEO_VALIDATION_ERROR';

type ShopifyFileErrorCodeQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyFileErrorCode>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyFileErrorCode>>>;
  readonly ne: InputMaybe<ShopifyFileErrorCode>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyFileErrorCode>>>;
};

type ShopifyFileErrorFieldSelector = {
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly details: InputMaybe<FieldSelectorEnum>;
  readonly message: InputMaybe<FieldSelectorEnum>;
};

type ShopifyFileErrorFilterInput = {
  readonly code: InputMaybe<ShopifyFileErrorCodeQueryOperatorInput>;
  readonly details: InputMaybe<StringQueryOperatorInput>;
  readonly message: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyFileErrorFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyFileErrorFilterInput>;
};

type ShopifyFileErrorSortInput = {
  readonly code: InputMaybe<SortOrderEnum>;
  readonly details: InputMaybe<SortOrderEnum>;
  readonly message: InputMaybe<SortOrderEnum>;
};

type ShopifyFileStatus =
  | 'FAILED'
  | 'PROCESSING'
  | 'READY'
  | 'UPLOADED';

type ShopifyFileStatusQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyFileStatus>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyFileStatus>>>;
  readonly ne: InputMaybe<ShopifyFileStatus>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyFileStatus>>>;
};

type ShopifyImage = {
  readonly altText: Maybe<Scalars['String']>;
  readonly gatsbyImageData: Maybe<Scalars['JSON']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalSrc: Scalars['String'];
  readonly src: Scalars['String'];
  readonly transformedSrc: Scalars['String'];
  readonly width: Maybe<Scalars['Int']>;
};


type ShopifyImage_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<GatsbyImagePlaceholder>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};

type ShopifyImageFieldSelector = {
  readonly altText: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalSrc: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly transformedSrc: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ShopifyImageFilterInput = {
  readonly altText: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalSrc: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly transformedSrc: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ShopifyImageSortInput = {
  readonly altText: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalSrc: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly transformedSrc: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ShopifyLink = {
  readonly label: Scalars['String'];
  readonly url: Scalars['String'];
};

type ShopifyLinkFieldSelector = {
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ShopifyLinkFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyLinkSortInput = {
  readonly label: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type ShopifyMedia = {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mediaContentType: ShopifyMediaContentType;
  readonly mediaErrors: ReadonlyArray<ShopifyMediaError>;
  readonly parent: Maybe<Node>;
  readonly preview: Maybe<ShopifyMediaPreviewImage>;
  readonly shopifyId: Scalars['String'];
  readonly status: ShopifyMediaStatus;
};

type ShopifyMediaConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyMediaEdge>;
  readonly group: ReadonlyArray<ShopifyMediaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyMedia>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyMediaConnection_distinctArgs = {
  field: ShopifyMediaFieldSelector;
};


type ShopifyMediaConnection_groupArgs = {
  field: ShopifyMediaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyMediaConnection_maxArgs = {
  field: ShopifyMediaFieldSelector;
};


type ShopifyMediaConnection_minArgs = {
  field: ShopifyMediaFieldSelector;
};


type ShopifyMediaConnection_sumArgs = {
  field: ShopifyMediaFieldSelector;
};

type ShopifyMediaContentType =
  | 'EXTERNAL_VIDEO'
  | 'IMAGE'
  | 'MODEL_3D'
  | 'VIDEO';

type ShopifyMediaContentTypeQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyMediaContentType>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaContentType>>>;
  readonly ne: InputMaybe<ShopifyMediaContentType>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaContentType>>>;
};

type ShopifyMediaEdge = {
  readonly next: Maybe<ShopifyMedia>;
  readonly node: ShopifyMedia;
  readonly previous: Maybe<ShopifyMedia>;
};

type ShopifyMediaError = {
  readonly code: ShopifyMediaErrorCode;
  readonly details: Maybe<Scalars['String']>;
  readonly message: Scalars['String'];
};

type ShopifyMediaErrorCode =
  | 'EXTERNAL_VIDEO_EMBED_DISABLED'
  | 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING'
  | 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO'
  | 'EXTERNAL_VIDEO_NOT_FOUND'
  | 'EXTERNAL_VIDEO_UNLISTED'
  | 'FILE_STORAGE_LIMIT_EXCEEDED'
  | 'GENERIC_FILE_DOWNLOAD_FAILURE'
  | 'GENERIC_FILE_INVALID_SIZE'
  | 'IMAGE_DOWNLOAD_FAILURE'
  | 'IMAGE_PROCESSING_FAILURE'
  | 'INVALID_IMAGE_ASPECT_RATIO'
  | 'INVALID_IMAGE_FILE_SIZE'
  | 'INVALID_IMAGE_RESOLUTION'
  | 'INVALID_SIGNED_URL'
  | 'MEDIA_TIMEOUT_ERROR'
  | 'MODEL3D_GLB_OUTPUT_CREATION_ERROR'
  | 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR'
  | 'MODEL3D_THUMBNAIL_GENERATION_ERROR'
  | 'MODEL3D_VALIDATION_ERROR'
  | 'UNKNOWN'
  | 'UNSUPPORTED_IMAGE_FILE_TYPE'
  | 'VIDEO_INVALID_FILETYPE_ERROR'
  | 'VIDEO_MAX_DURATION_ERROR'
  | 'VIDEO_MAX_HEIGHT_ERROR'
  | 'VIDEO_MAX_WIDTH_ERROR'
  | 'VIDEO_METADATA_READ_ERROR'
  | 'VIDEO_MIN_DURATION_ERROR'
  | 'VIDEO_MIN_HEIGHT_ERROR'
  | 'VIDEO_MIN_WIDTH_ERROR'
  | 'VIDEO_VALIDATION_ERROR';

type ShopifyMediaErrorCodeQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyMediaErrorCode>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaErrorCode>>>;
  readonly ne: InputMaybe<ShopifyMediaErrorCode>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaErrorCode>>>;
};

type ShopifyMediaErrorFieldSelector = {
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly details: InputMaybe<FieldSelectorEnum>;
  readonly message: InputMaybe<FieldSelectorEnum>;
};

type ShopifyMediaErrorFilterInput = {
  readonly code: InputMaybe<ShopifyMediaErrorCodeQueryOperatorInput>;
  readonly details: InputMaybe<StringQueryOperatorInput>;
  readonly message: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyMediaErrorFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyMediaErrorFilterInput>;
};

type ShopifyMediaErrorSortInput = {
  readonly code: InputMaybe<SortOrderEnum>;
  readonly details: InputMaybe<SortOrderEnum>;
  readonly message: InputMaybe<SortOrderEnum>;
};

type ShopifyMediaFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mediaContentType: InputMaybe<FieldSelectorEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly status: InputMaybe<FieldSelectorEnum>;
};

type ShopifyMediaFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};

type ShopifyMediaFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyMediaFilterInput>;
};

type ShopifyMediaGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyMediaEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyMediaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyMedia>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyMediaGroupConnection_distinctArgs = {
  field: ShopifyMediaFieldSelector;
};


type ShopifyMediaGroupConnection_groupArgs = {
  field: ShopifyMediaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyMediaGroupConnection_maxArgs = {
  field: ShopifyMediaFieldSelector;
};


type ShopifyMediaGroupConnection_minArgs = {
  field: ShopifyMediaFieldSelector;
};


type ShopifyMediaGroupConnection_sumArgs = {
  field: ShopifyMediaFieldSelector;
};

type ShopifyMediaHost =
  | 'VIMEO'
  | 'YOUTUBE';

type ShopifyMediaHostQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyMediaHost>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaHost>>>;
  readonly ne: InputMaybe<ShopifyMediaHost>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaHost>>>;
};

type ShopifyMediaImage = Node & ShopifyMedia & {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Scalars['Date'];
  readonly fileErrors: ReadonlyArray<ShopifyFileError>;
  readonly fileStatus: ShopifyFileStatus;
  readonly id: Scalars['ID'];
  readonly image: Maybe<ShopifyImage>;
  readonly internal: Internal;
  readonly mediaContentType: ShopifyMediaContentType;
  readonly mediaErrors: ReadonlyArray<ShopifyMediaError>;
  readonly mimeType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly preview: Maybe<ShopifyMediaPreviewImage>;
  readonly shopifyId: Scalars['String'];
  readonly status: ShopifyMediaStatus;
};


type ShopifyMediaImage_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ShopifyMediaImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyMediaImageEdge>;
  readonly group: ReadonlyArray<ShopifyMediaImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyMediaImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyMediaImageConnection_distinctArgs = {
  field: ShopifyMediaImageFieldSelector;
};


type ShopifyMediaImageConnection_groupArgs = {
  field: ShopifyMediaImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyMediaImageConnection_maxArgs = {
  field: ShopifyMediaImageFieldSelector;
};


type ShopifyMediaImageConnection_minArgs = {
  field: ShopifyMediaImageFieldSelector;
};


type ShopifyMediaImageConnection_sumArgs = {
  field: ShopifyMediaImageFieldSelector;
};

type ShopifyMediaImageEdge = {
  readonly next: Maybe<ShopifyMediaImage>;
  readonly node: ShopifyMediaImage;
  readonly previous: Maybe<ShopifyMediaImage>;
};

type ShopifyMediaImageFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly fileErrors: InputMaybe<ShopifyFileErrorFieldSelector>;
  readonly fileStatus: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ShopifyImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mediaContentType: InputMaybe<FieldSelectorEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFieldSelector>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly status: InputMaybe<FieldSelectorEnum>;
};

type ShopifyMediaImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly fileErrors: InputMaybe<ShopifyFileErrorFilterListInput>;
  readonly fileStatus: InputMaybe<ShopifyFileStatusQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ShopifyImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};

type ShopifyMediaImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyMediaImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyMediaImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyMediaImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyMediaImageGroupConnection_distinctArgs = {
  field: ShopifyMediaImageFieldSelector;
};


type ShopifyMediaImageGroupConnection_groupArgs = {
  field: ShopifyMediaImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyMediaImageGroupConnection_maxArgs = {
  field: ShopifyMediaImageFieldSelector;
};


type ShopifyMediaImageGroupConnection_minArgs = {
  field: ShopifyMediaImageFieldSelector;
};


type ShopifyMediaImageGroupConnection_sumArgs = {
  field: ShopifyMediaImageFieldSelector;
};

type ShopifyMediaImageSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly fileErrors: InputMaybe<ShopifyFileErrorSortInput>;
  readonly fileStatus: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ShopifyImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mediaContentType: InputMaybe<SortOrderEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorSortInput>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly status: InputMaybe<SortOrderEnum>;
};

type ShopifyMediaPreviewImage = {
  readonly image: Maybe<ShopifyImage>;
  readonly status: ShopifyMediaPreviewImageStatus;
};

type ShopifyMediaPreviewImageFieldSelector = {
  readonly image: InputMaybe<ShopifyImageFieldSelector>;
  readonly status: InputMaybe<FieldSelectorEnum>;
};

type ShopifyMediaPreviewImageFilterInput = {
  readonly image: InputMaybe<ShopifyImageFilterInput>;
  readonly status: InputMaybe<ShopifyMediaPreviewImageStatusQueryOperatorInput>;
};

type ShopifyMediaPreviewImageSortInput = {
  readonly image: InputMaybe<ShopifyImageSortInput>;
  readonly status: InputMaybe<SortOrderEnum>;
};

type ShopifyMediaPreviewImageStatus =
  | 'FAILED'
  | 'PROCESSING'
  | 'READY'
  | 'UPLOADED';

type ShopifyMediaPreviewImageStatusQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyMediaPreviewImageStatus>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaPreviewImageStatus>>>;
  readonly ne: InputMaybe<ShopifyMediaPreviewImageStatus>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaPreviewImageStatus>>>;
};

type ShopifyMediaSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mediaContentType: InputMaybe<SortOrderEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly status: InputMaybe<SortOrderEnum>;
};

type ShopifyMediaStatus =
  | 'FAILED'
  | 'PROCESSING'
  | 'READY'
  | 'UPLOADED';

type ShopifyMediaStatusQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyMediaStatus>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaStatus>>>;
  readonly ne: InputMaybe<ShopifyMediaStatus>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMediaStatus>>>;
};

type ShopifyMetafield = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Scalars['Date'];
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly key: Scalars['String'];
  readonly legacyResourceId: Scalars['String'];
  readonly namespace: Scalars['String'];
  readonly ownerType: ShopifyMetafieldOwnerType;
  readonly parent: Maybe<Node>;
  readonly shopifyId: Scalars['String'];
  readonly type: Scalars['String'];
  readonly updatedAt: Scalars['Date'];
  readonly value: Scalars['String'];
  /** @deprecated `valueType` is deprecated and replaced by `type` in API version 2021-07. */
  readonly valueType: Scalars['String'];
};


type ShopifyMetafield_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ShopifyMetafield_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ShopifyMetafieldConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyMetafieldEdge>;
  readonly group: ReadonlyArray<ShopifyMetafieldGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyMetafield>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyMetafieldConnection_distinctArgs = {
  field: ShopifyMetafieldFieldSelector;
};


type ShopifyMetafieldConnection_groupArgs = {
  field: ShopifyMetafieldFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyMetafieldConnection_maxArgs = {
  field: ShopifyMetafieldFieldSelector;
};


type ShopifyMetafieldConnection_minArgs = {
  field: ShopifyMetafieldFieldSelector;
};


type ShopifyMetafieldConnection_sumArgs = {
  field: ShopifyMetafieldFieldSelector;
};

type ShopifyMetafieldEdge = {
  readonly next: Maybe<ShopifyMetafield>;
  readonly node: ShopifyMetafield;
  readonly previous: Maybe<ShopifyMetafield>;
};

type ShopifyMetafieldFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly legacyResourceId: InputMaybe<FieldSelectorEnum>;
  readonly namespace: InputMaybe<FieldSelectorEnum>;
  readonly ownerType: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
  readonly valueType: InputMaybe<FieldSelectorEnum>;
};

type ShopifyMetafieldFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  readonly namespace: InputMaybe<StringQueryOperatorInput>;
  readonly ownerType: InputMaybe<ShopifyMetafieldOwnerTypeQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
  readonly valueType: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyMetafieldFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyMetafieldFilterInput>;
};

type ShopifyMetafieldGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyMetafieldEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyMetafieldGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyMetafield>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyMetafieldGroupConnection_distinctArgs = {
  field: ShopifyMetafieldFieldSelector;
};


type ShopifyMetafieldGroupConnection_groupArgs = {
  field: ShopifyMetafieldFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyMetafieldGroupConnection_maxArgs = {
  field: ShopifyMetafieldFieldSelector;
};


type ShopifyMetafieldGroupConnection_minArgs = {
  field: ShopifyMetafieldFieldSelector;
};


type ShopifyMetafieldGroupConnection_sumArgs = {
  field: ShopifyMetafieldFieldSelector;
};

type ShopifyMetafieldOwnerType =
  | 'ARTICLE'
  | 'BLOG'
  | 'COLLECTION'
  | 'CUSTOMER'
  | 'DRAFTORDER'
  | 'ORDER'
  | 'PAGE'
  | 'PRODUCT'
  | 'PRODUCTIMAGE'
  | 'PRODUCTVARIANT'
  | 'SHOP';

type ShopifyMetafieldOwnerTypeQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyMetafieldOwnerType>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMetafieldOwnerType>>>;
  readonly ne: InputMaybe<ShopifyMetafieldOwnerType>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyMetafieldOwnerType>>>;
};

type ShopifyMetafieldSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly legacyResourceId: InputMaybe<SortOrderEnum>;
  readonly namespace: InputMaybe<SortOrderEnum>;
  readonly ownerType: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
  readonly valueType: InputMaybe<SortOrderEnum>;
};

type ShopifyModel3d = Node & ShopifyMedia & {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly filename: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mediaContentType: ShopifyMediaContentType;
  readonly mediaErrors: ReadonlyArray<ShopifyMediaError>;
  readonly originalSource: Maybe<ShopifyModel3dSource>;
  readonly parent: Maybe<Node>;
  readonly preview: Maybe<ShopifyMediaPreviewImage>;
  readonly shopifyId: Scalars['String'];
  readonly sources: ReadonlyArray<ShopifyModel3dSource>;
  readonly status: ShopifyMediaStatus;
};

type ShopifyModel3dConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyModel3dEdge>;
  readonly group: ReadonlyArray<ShopifyModel3dGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyModel3d>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyModel3dConnection_distinctArgs = {
  field: ShopifyModel3dFieldSelector;
};


type ShopifyModel3dConnection_groupArgs = {
  field: ShopifyModel3dFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyModel3dConnection_maxArgs = {
  field: ShopifyModel3dFieldSelector;
};


type ShopifyModel3dConnection_minArgs = {
  field: ShopifyModel3dFieldSelector;
};


type ShopifyModel3dConnection_sumArgs = {
  field: ShopifyModel3dFieldSelector;
};

type ShopifyModel3dEdge = {
  readonly next: Maybe<ShopifyModel3d>;
  readonly node: ShopifyModel3d;
  readonly previous: Maybe<ShopifyModel3d>;
};

type ShopifyModel3dFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly filename: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mediaContentType: InputMaybe<FieldSelectorEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFieldSelector>;
  readonly originalSource: InputMaybe<ShopifyModel3dSourceFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly sources: InputMaybe<ShopifyModel3dSourceFieldSelector>;
  readonly status: InputMaybe<FieldSelectorEnum>;
};

type ShopifyModel3dFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  readonly originalSource: InputMaybe<ShopifyModel3dSourceFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly sources: InputMaybe<ShopifyModel3dSourceFilterListInput>;
  readonly status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};

type ShopifyModel3dGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyModel3dEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyModel3dGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyModel3d>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyModel3dGroupConnection_distinctArgs = {
  field: ShopifyModel3dFieldSelector;
};


type ShopifyModel3dGroupConnection_groupArgs = {
  field: ShopifyModel3dFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyModel3dGroupConnection_maxArgs = {
  field: ShopifyModel3dFieldSelector;
};


type ShopifyModel3dGroupConnection_minArgs = {
  field: ShopifyModel3dFieldSelector;
};


type ShopifyModel3dGroupConnection_sumArgs = {
  field: ShopifyModel3dFieldSelector;
};

type ShopifyModel3dSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly filename: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mediaContentType: InputMaybe<SortOrderEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorSortInput>;
  readonly originalSource: InputMaybe<ShopifyModel3dSourceSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly sources: InputMaybe<ShopifyModel3dSourceSortInput>;
  readonly status: InputMaybe<SortOrderEnum>;
};

type ShopifyModel3dSource = {
  readonly filesize: Scalars['Int'];
  readonly format: Scalars['String'];
  readonly mimeType: Scalars['String'];
  readonly url: Scalars['String'];
};

type ShopifyModel3dSourceFieldSelector = {
  readonly filesize: InputMaybe<FieldSelectorEnum>;
  readonly format: InputMaybe<FieldSelectorEnum>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ShopifyModel3dSourceFilterInput = {
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly format: InputMaybe<StringQueryOperatorInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyModel3dSourceFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyModel3dSourceFilterInput>;
};

type ShopifyModel3dSourceSortInput = {
  readonly filesize: InputMaybe<SortOrderEnum>;
  readonly format: InputMaybe<SortOrderEnum>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type ShopifyMoneyV2 = {
  readonly amount: Scalars['Float'];
  readonly currencyCode: ShopifyCurrencyCode;
};

type ShopifyMoneyV2FieldSelector = {
  readonly amount: InputMaybe<FieldSelectorEnum>;
  readonly currencyCode: InputMaybe<FieldSelectorEnum>;
};

type ShopifyMoneyV2FilterInput = {
  readonly amount: InputMaybe<FloatQueryOperatorInput>;
  readonly currencyCode: InputMaybe<ShopifyCurrencyCodeQueryOperatorInput>;
};

type ShopifyMoneyV2SortInput = {
  readonly amount: InputMaybe<SortOrderEnum>;
  readonly currencyCode: InputMaybe<SortOrderEnum>;
};

type ShopifyProduct = Node & {
  readonly _featuredMedia: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly collections: ReadonlyArray<ShopifyCollection>;
  readonly createdAt: Scalars['Date'];
  readonly description: Scalars['String'];
  readonly descriptionHtml: Scalars['String'];
  readonly featuredImage: Maybe<ShopifyImage>;
  readonly featuredMedia: Maybe<ShopifyMedia>;
  readonly feedback: Maybe<ShopifyResourceFeedback>;
  readonly giftCardTemplateSuffix: Maybe<Scalars['String']>;
  readonly handle: Scalars['String'];
  readonly hasOnlyDefaultVariant: Scalars['Boolean'];
  readonly hasOutOfStockVariants: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly isGiftCard: Scalars['Boolean'];
  readonly legacyResourceId: Scalars['String'];
  readonly media: ReadonlyArray<ShopifyMedia>;
  readonly mediaCount: Scalars['Int'];
  readonly metafield: Maybe<ShopifyMetafield>;
  readonly metafields: ReadonlyArray<ShopifyMetafield>;
  readonly onlineStorePreviewUrl: Maybe<Scalars['String']>;
  readonly onlineStoreUrl: Maybe<Scalars['String']>;
  readonly options: ReadonlyArray<ShopifyProductOption>;
  readonly parent: Maybe<Node>;
  /** @deprecated Deprecated in API version 2020-10. Use `priceRangeV2` instead. */
  readonly priceRange: ShopifyProductPriceRange;
  readonly priceRangeV2: ShopifyProductPriceRangeV2;
  readonly productType: Scalars['String'];
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly requiresSellingPlan: Scalars['Boolean'];
  readonly sellingPlanGroupCount: Scalars['Int'];
  readonly seo: ShopifySEO;
  readonly shopifyId: Scalars['String'];
  readonly status: ShopifyProductStatus;
  readonly storefrontId: Scalars['String'];
  readonly tags: ReadonlyArray<Scalars['String']>;
  readonly templateSuffix: Maybe<Scalars['String']>;
  readonly title: Scalars['String'];
  readonly totalInventory: Scalars['Int'];
  readonly totalVariants: Scalars['Int'];
  readonly tracksInventory: Scalars['Boolean'];
  readonly updatedAt: Scalars['Date'];
  readonly variants: ReadonlyArray<ShopifyProductVariant>;
  readonly vendor: Scalars['String'];
};


type ShopifyProduct_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ShopifyProduct_metafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


type ShopifyProduct_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ShopifyProduct_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ShopifyProductConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyProductEdge>;
  readonly group: ReadonlyArray<ShopifyProductGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyProduct>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyProductConnection_distinctArgs = {
  field: ShopifyProductFieldSelector;
};


type ShopifyProductConnection_groupArgs = {
  field: ShopifyProductFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyProductConnection_maxArgs = {
  field: ShopifyProductFieldSelector;
};


type ShopifyProductConnection_minArgs = {
  field: ShopifyProductFieldSelector;
};


type ShopifyProductConnection_sumArgs = {
  field: ShopifyProductFieldSelector;
};

type ShopifyProductEdge = {
  readonly next: Maybe<ShopifyProduct>;
  readonly node: ShopifyProduct;
  readonly previous: Maybe<ShopifyProduct>;
};

type ShopifyProductFieldSelector = {
  readonly _featuredMedia: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly collections: InputMaybe<ShopifyCollectionFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly descriptionHtml: InputMaybe<FieldSelectorEnum>;
  readonly featuredImage: InputMaybe<ShopifyImageFieldSelector>;
  readonly featuredMedia: InputMaybe<ShopifyMediaFieldSelector>;
  readonly feedback: InputMaybe<ShopifyResourceFeedbackFieldSelector>;
  readonly giftCardTemplateSuffix: InputMaybe<FieldSelectorEnum>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly hasOnlyDefaultVariant: InputMaybe<FieldSelectorEnum>;
  readonly hasOutOfStockVariants: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly isGiftCard: InputMaybe<FieldSelectorEnum>;
  readonly legacyResourceId: InputMaybe<FieldSelectorEnum>;
  readonly media: InputMaybe<ShopifyMediaFieldSelector>;
  readonly mediaCount: InputMaybe<FieldSelectorEnum>;
  readonly metafield: InputMaybe<ShopifyMetafieldFieldSelector>;
  readonly metafields: InputMaybe<ShopifyMetafieldFieldSelector>;
  readonly onlineStorePreviewUrl: InputMaybe<FieldSelectorEnum>;
  readonly onlineStoreUrl: InputMaybe<FieldSelectorEnum>;
  readonly options: InputMaybe<ShopifyProductOptionFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly priceRange: InputMaybe<ShopifyProductPriceRangeFieldSelector>;
  readonly priceRangeV2: InputMaybe<ShopifyProductPriceRangeV2FieldSelector>;
  readonly productType: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly requiresSellingPlan: InputMaybe<FieldSelectorEnum>;
  readonly sellingPlanGroupCount: InputMaybe<FieldSelectorEnum>;
  readonly seo: InputMaybe<ShopifySEOFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly status: InputMaybe<FieldSelectorEnum>;
  readonly storefrontId: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly templateSuffix: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly totalInventory: InputMaybe<FieldSelectorEnum>;
  readonly totalVariants: InputMaybe<FieldSelectorEnum>;
  readonly tracksInventory: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly variants: InputMaybe<ShopifyProductVariantFieldSelector>;
  readonly vendor: InputMaybe<FieldSelectorEnum>;
};

type ShopifyProductFilterInput = {
  readonly _featuredMedia: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly collections: InputMaybe<ShopifyCollectionFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly descriptionHtml: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<ShopifyImageFilterInput>;
  readonly featuredMedia: InputMaybe<ShopifyMediaFilterInput>;
  readonly feedback: InputMaybe<ShopifyResourceFeedbackFilterInput>;
  readonly giftCardTemplateSuffix: InputMaybe<StringQueryOperatorInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly hasOnlyDefaultVariant: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasOutOfStockVariants: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isGiftCard: InputMaybe<BooleanQueryOperatorInput>;
  readonly legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  readonly media: InputMaybe<ShopifyMediaFilterListInput>;
  readonly mediaCount: InputMaybe<IntQueryOperatorInput>;
  readonly metafield: InputMaybe<ShopifyMetafieldFilterInput>;
  readonly metafields: InputMaybe<ShopifyMetafieldFilterListInput>;
  readonly onlineStorePreviewUrl: InputMaybe<StringQueryOperatorInput>;
  readonly onlineStoreUrl: InputMaybe<StringQueryOperatorInput>;
  readonly options: InputMaybe<ShopifyProductOptionFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly priceRange: InputMaybe<ShopifyProductPriceRangeFilterInput>;
  readonly priceRangeV2: InputMaybe<ShopifyProductPriceRangeV2FilterInput>;
  readonly productType: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly requiresSellingPlan: InputMaybe<BooleanQueryOperatorInput>;
  readonly sellingPlanGroupCount: InputMaybe<IntQueryOperatorInput>;
  readonly seo: InputMaybe<ShopifySEOFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<ShopifyProductStatusQueryOperatorInput>;
  readonly storefrontId: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly templateSuffix: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly totalInventory: InputMaybe<IntQueryOperatorInput>;
  readonly totalVariants: InputMaybe<IntQueryOperatorInput>;
  readonly tracksInventory: InputMaybe<BooleanQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly variants: InputMaybe<ShopifyProductVariantFilterListInput>;
  readonly vendor: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyProductFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyProductFilterInput>;
};

type ShopifyProductGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyProductEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyProductGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyProduct>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyProductGroupConnection_distinctArgs = {
  field: ShopifyProductFieldSelector;
};


type ShopifyProductGroupConnection_groupArgs = {
  field: ShopifyProductFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyProductGroupConnection_maxArgs = {
  field: ShopifyProductFieldSelector;
};


type ShopifyProductGroupConnection_minArgs = {
  field: ShopifyProductFieldSelector;
};


type ShopifyProductGroupConnection_sumArgs = {
  field: ShopifyProductFieldSelector;
};

type ShopifyProductOption = {
  readonly name: Scalars['String'];
  readonly position: Scalars['Int'];
  readonly shopifyId: Scalars['String'];
  readonly values: ReadonlyArray<Scalars['String']>;
};

type ShopifyProductOptionFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly values: InputMaybe<FieldSelectorEnum>;
};

type ShopifyProductOptionFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly position: InputMaybe<IntQueryOperatorInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly values: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyProductOptionFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyProductOptionFilterInput>;
};

type ShopifyProductOptionSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly values: InputMaybe<SortOrderEnum>;
};

type ShopifyProductPriceRange = {
  readonly maxVariantPrice: ShopifyMoneyV2;
  readonly minVariantPrice: ShopifyMoneyV2;
};

type ShopifyProductPriceRangeFieldSelector = {
  readonly maxVariantPrice: InputMaybe<ShopifyMoneyV2FieldSelector>;
  readonly minVariantPrice: InputMaybe<ShopifyMoneyV2FieldSelector>;
};

type ShopifyProductPriceRangeFilterInput = {
  readonly maxVariantPrice: InputMaybe<ShopifyMoneyV2FilterInput>;
  readonly minVariantPrice: InputMaybe<ShopifyMoneyV2FilterInput>;
};

type ShopifyProductPriceRangeSortInput = {
  readonly maxVariantPrice: InputMaybe<ShopifyMoneyV2SortInput>;
  readonly minVariantPrice: InputMaybe<ShopifyMoneyV2SortInput>;
};

type ShopifyProductPriceRangeV2 = {
  readonly maxVariantPrice: ShopifyMoneyV2;
  readonly minVariantPrice: ShopifyMoneyV2;
};

type ShopifyProductPriceRangeV2FieldSelector = {
  readonly maxVariantPrice: InputMaybe<ShopifyMoneyV2FieldSelector>;
  readonly minVariantPrice: InputMaybe<ShopifyMoneyV2FieldSelector>;
};

type ShopifyProductPriceRangeV2FilterInput = {
  readonly maxVariantPrice: InputMaybe<ShopifyMoneyV2FilterInput>;
  readonly minVariantPrice: InputMaybe<ShopifyMoneyV2FilterInput>;
};

type ShopifyProductPriceRangeV2SortInput = {
  readonly maxVariantPrice: InputMaybe<ShopifyMoneyV2SortInput>;
  readonly minVariantPrice: InputMaybe<ShopifyMoneyV2SortInput>;
};

type ShopifyProductSortInput = {
  readonly _featuredMedia: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly collections: InputMaybe<ShopifyCollectionSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly descriptionHtml: InputMaybe<SortOrderEnum>;
  readonly featuredImage: InputMaybe<ShopifyImageSortInput>;
  readonly featuredMedia: InputMaybe<ShopifyMediaSortInput>;
  readonly feedback: InputMaybe<ShopifyResourceFeedbackSortInput>;
  readonly giftCardTemplateSuffix: InputMaybe<SortOrderEnum>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly hasOnlyDefaultVariant: InputMaybe<SortOrderEnum>;
  readonly hasOutOfStockVariants: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly isGiftCard: InputMaybe<SortOrderEnum>;
  readonly legacyResourceId: InputMaybe<SortOrderEnum>;
  readonly media: InputMaybe<ShopifyMediaSortInput>;
  readonly mediaCount: InputMaybe<SortOrderEnum>;
  readonly metafield: InputMaybe<ShopifyMetafieldSortInput>;
  readonly metafields: InputMaybe<ShopifyMetafieldSortInput>;
  readonly onlineStorePreviewUrl: InputMaybe<SortOrderEnum>;
  readonly onlineStoreUrl: InputMaybe<SortOrderEnum>;
  readonly options: InputMaybe<ShopifyProductOptionSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly priceRange: InputMaybe<ShopifyProductPriceRangeSortInput>;
  readonly priceRangeV2: InputMaybe<ShopifyProductPriceRangeV2SortInput>;
  readonly productType: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly requiresSellingPlan: InputMaybe<SortOrderEnum>;
  readonly sellingPlanGroupCount: InputMaybe<SortOrderEnum>;
  readonly seo: InputMaybe<ShopifySEOSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly status: InputMaybe<SortOrderEnum>;
  readonly storefrontId: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly templateSuffix: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly totalInventory: InputMaybe<SortOrderEnum>;
  readonly totalVariants: InputMaybe<SortOrderEnum>;
  readonly tracksInventory: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly variants: InputMaybe<ShopifyProductVariantSortInput>;
  readonly vendor: InputMaybe<SortOrderEnum>;
};

type ShopifyProductStatus =
  | 'ACTIVE'
  | 'ARCHIVED'
  | 'DRAFT';

type ShopifyProductStatusQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyProductStatus>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyProductStatus>>>;
  readonly ne: InputMaybe<ShopifyProductStatus>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyProductStatus>>>;
};

type ShopifyProductVariant = Node & {
  readonly _product: Scalars['String'];
  readonly availableForSale: Scalars['Boolean'];
  readonly barcode: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly compareAtPrice: Maybe<Scalars['Float']>;
  readonly createdAt: Scalars['Date'];
  readonly displayName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<ShopifyImage>;
  readonly internal: Internal;
  readonly inventoryPolicy: ShopifyProductVariantInventoryPolicy;
  readonly inventoryQuantity: Maybe<Scalars['Int']>;
  readonly legacyResourceId: Scalars['String'];
  readonly media: ReadonlyArray<ShopifyMedia>;
  readonly metafield: Maybe<ShopifyMetafield>;
  readonly metafields: ReadonlyArray<ShopifyMetafield>;
  readonly parent: Maybe<Node>;
  readonly position: Scalars['Int'];
  readonly presentmentPrices: ReadonlyArray<ShopifyProductVariantPricePair>;
  readonly price: Scalars['Float'];
  readonly product: ShopifyProduct;
  /** @deprecated Use `InventoryItem.requiresShipping` instead. */
  readonly requiresShipping: Scalars['Boolean'];
  readonly selectedOptions: ReadonlyArray<ShopifySelectedOption>;
  readonly sellingPlanGroupCount: Scalars['Int'];
  readonly shopifyId: Scalars['String'];
  readonly sku: Maybe<Scalars['String']>;
  readonly storefrontId: Scalars['String'];
  readonly taxCode: Maybe<Scalars['String']>;
  readonly taxable: Scalars['Boolean'];
  readonly title: Scalars['String'];
  readonly updatedAt: Scalars['Date'];
  readonly weight: Maybe<Scalars['Float']>;
  readonly weightUnit: ShopifyWeightUnit;
};


type ShopifyProductVariant_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ShopifyProductVariant_metafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


type ShopifyProductVariant_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ShopifyProductVariantConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyProductVariantEdge>;
  readonly group: ReadonlyArray<ShopifyProductVariantGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyProductVariant>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyProductVariantConnection_distinctArgs = {
  field: ShopifyProductVariantFieldSelector;
};


type ShopifyProductVariantConnection_groupArgs = {
  field: ShopifyProductVariantFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyProductVariantConnection_maxArgs = {
  field: ShopifyProductVariantFieldSelector;
};


type ShopifyProductVariantConnection_minArgs = {
  field: ShopifyProductVariantFieldSelector;
};


type ShopifyProductVariantConnection_sumArgs = {
  field: ShopifyProductVariantFieldSelector;
};

type ShopifyProductVariantEdge = {
  readonly next: Maybe<ShopifyProductVariant>;
  readonly node: ShopifyProductVariant;
  readonly previous: Maybe<ShopifyProductVariant>;
};

type ShopifyProductVariantFieldSelector = {
  readonly _product: InputMaybe<FieldSelectorEnum>;
  readonly availableForSale: InputMaybe<FieldSelectorEnum>;
  readonly barcode: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly compareAtPrice: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly displayName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ShopifyImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly inventoryPolicy: InputMaybe<FieldSelectorEnum>;
  readonly inventoryQuantity: InputMaybe<FieldSelectorEnum>;
  readonly legacyResourceId: InputMaybe<FieldSelectorEnum>;
  readonly media: InputMaybe<ShopifyMediaFieldSelector>;
  readonly metafield: InputMaybe<ShopifyMetafieldFieldSelector>;
  readonly metafields: InputMaybe<ShopifyMetafieldFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly presentmentPrices: InputMaybe<ShopifyProductVariantPricePairFieldSelector>;
  readonly price: InputMaybe<FieldSelectorEnum>;
  readonly product: InputMaybe<ShopifyProductFieldSelector>;
  readonly requiresShipping: InputMaybe<FieldSelectorEnum>;
  readonly selectedOptions: InputMaybe<ShopifySelectedOptionFieldSelector>;
  readonly sellingPlanGroupCount: InputMaybe<FieldSelectorEnum>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly sku: InputMaybe<FieldSelectorEnum>;
  readonly storefrontId: InputMaybe<FieldSelectorEnum>;
  readonly taxCode: InputMaybe<FieldSelectorEnum>;
  readonly taxable: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
  readonly weightUnit: InputMaybe<FieldSelectorEnum>;
};

type ShopifyProductVariantFilterInput = {
  readonly _product: InputMaybe<StringQueryOperatorInput>;
  readonly availableForSale: InputMaybe<BooleanQueryOperatorInput>;
  readonly barcode: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly compareAtPrice: InputMaybe<FloatQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly displayName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ShopifyImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly inventoryPolicy: InputMaybe<ShopifyProductVariantInventoryPolicyQueryOperatorInput>;
  readonly inventoryQuantity: InputMaybe<IntQueryOperatorInput>;
  readonly legacyResourceId: InputMaybe<StringQueryOperatorInput>;
  readonly media: InputMaybe<ShopifyMediaFilterListInput>;
  readonly metafield: InputMaybe<ShopifyMetafieldFilterInput>;
  readonly metafields: InputMaybe<ShopifyMetafieldFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly position: InputMaybe<IntQueryOperatorInput>;
  readonly presentmentPrices: InputMaybe<ShopifyProductVariantPricePairFilterListInput>;
  readonly price: InputMaybe<FloatQueryOperatorInput>;
  readonly product: InputMaybe<ShopifyProductFilterInput>;
  readonly requiresShipping: InputMaybe<BooleanQueryOperatorInput>;
  readonly selectedOptions: InputMaybe<ShopifySelectedOptionFilterListInput>;
  readonly sellingPlanGroupCount: InputMaybe<IntQueryOperatorInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly sku: InputMaybe<StringQueryOperatorInput>;
  readonly storefrontId: InputMaybe<StringQueryOperatorInput>;
  readonly taxCode: InputMaybe<StringQueryOperatorInput>;
  readonly taxable: InputMaybe<BooleanQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly weight: InputMaybe<FloatQueryOperatorInput>;
  readonly weightUnit: InputMaybe<ShopifyWeightUnitQueryOperatorInput>;
};

type ShopifyProductVariantFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyProductVariantFilterInput>;
};

type ShopifyProductVariantGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyProductVariantEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyProductVariantGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyProductVariant>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyProductVariantGroupConnection_distinctArgs = {
  field: ShopifyProductVariantFieldSelector;
};


type ShopifyProductVariantGroupConnection_groupArgs = {
  field: ShopifyProductVariantFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyProductVariantGroupConnection_maxArgs = {
  field: ShopifyProductVariantFieldSelector;
};


type ShopifyProductVariantGroupConnection_minArgs = {
  field: ShopifyProductVariantFieldSelector;
};


type ShopifyProductVariantGroupConnection_sumArgs = {
  field: ShopifyProductVariantFieldSelector;
};

type ShopifyProductVariantInventoryPolicy =
  | 'CONTINUE'
  | 'DENY';

type ShopifyProductVariantInventoryPolicyQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyProductVariantInventoryPolicy>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyProductVariantInventoryPolicy>>>;
  readonly ne: InputMaybe<ShopifyProductVariantInventoryPolicy>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyProductVariantInventoryPolicy>>>;
};

type ShopifyProductVariantPricePair = {
  readonly compareAtPrice: Maybe<ShopifyMoneyV2>;
  readonly price: ShopifyMoneyV2;
};

type ShopifyProductVariantPricePairFieldSelector = {
  readonly compareAtPrice: InputMaybe<ShopifyMoneyV2FieldSelector>;
  readonly price: InputMaybe<ShopifyMoneyV2FieldSelector>;
};

type ShopifyProductVariantPricePairFilterInput = {
  readonly compareAtPrice: InputMaybe<ShopifyMoneyV2FilterInput>;
  readonly price: InputMaybe<ShopifyMoneyV2FilterInput>;
};

type ShopifyProductVariantPricePairFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyProductVariantPricePairFilterInput>;
};

type ShopifyProductVariantPricePairSortInput = {
  readonly compareAtPrice: InputMaybe<ShopifyMoneyV2SortInput>;
  readonly price: InputMaybe<ShopifyMoneyV2SortInput>;
};

type ShopifyProductVariantSortInput = {
  readonly _product: InputMaybe<SortOrderEnum>;
  readonly availableForSale: InputMaybe<SortOrderEnum>;
  readonly barcode: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly compareAtPrice: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly displayName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ShopifyImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly inventoryPolicy: InputMaybe<SortOrderEnum>;
  readonly inventoryQuantity: InputMaybe<SortOrderEnum>;
  readonly legacyResourceId: InputMaybe<SortOrderEnum>;
  readonly media: InputMaybe<ShopifyMediaSortInput>;
  readonly metafield: InputMaybe<ShopifyMetafieldSortInput>;
  readonly metafields: InputMaybe<ShopifyMetafieldSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly presentmentPrices: InputMaybe<ShopifyProductVariantPricePairSortInput>;
  readonly price: InputMaybe<SortOrderEnum>;
  readonly product: InputMaybe<ShopifyProductSortInput>;
  readonly requiresShipping: InputMaybe<SortOrderEnum>;
  readonly selectedOptions: InputMaybe<ShopifySelectedOptionSortInput>;
  readonly sellingPlanGroupCount: InputMaybe<SortOrderEnum>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly sku: InputMaybe<SortOrderEnum>;
  readonly storefrontId: InputMaybe<SortOrderEnum>;
  readonly taxCode: InputMaybe<SortOrderEnum>;
  readonly taxable: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
  readonly weightUnit: InputMaybe<SortOrderEnum>;
};

type ShopifyResourceFeedback = {
  readonly details: ReadonlyArray<ShopifyAppFeedback>;
  readonly summary: Scalars['String'];
};

type ShopifyResourceFeedbackFieldSelector = {
  readonly details: InputMaybe<ShopifyAppFeedbackFieldSelector>;
  readonly summary: InputMaybe<FieldSelectorEnum>;
};

type ShopifyResourceFeedbackFilterInput = {
  readonly details: InputMaybe<ShopifyAppFeedbackFilterListInput>;
  readonly summary: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyResourceFeedbackSortInput = {
  readonly details: InputMaybe<ShopifyAppFeedbackSortInput>;
  readonly summary: InputMaybe<SortOrderEnum>;
};

type ShopifySEO = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type ShopifySEOFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type ShopifySEOFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ShopifySEOSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type ShopifySelectedOption = {
  readonly name: Scalars['String'];
  readonly value: Scalars['String'];
};

type ShopifySelectedOptionFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type ShopifySelectedOptionFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type ShopifySelectedOptionFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifySelectedOptionFilterInput>;
};

type ShopifySelectedOptionSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type ShopifyUserError = {
  readonly field: Maybe<ReadonlyArray<Scalars['String']>>;
  readonly message: Scalars['String'];
};

type ShopifyUserErrorFieldSelector = {
  readonly field: InputMaybe<FieldSelectorEnum>;
  readonly message: InputMaybe<FieldSelectorEnum>;
};

type ShopifyUserErrorFilterInput = {
  readonly field: InputMaybe<StringQueryOperatorInput>;
  readonly message: InputMaybe<StringQueryOperatorInput>;
};

type ShopifyUserErrorFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyUserErrorFilterInput>;
};

type ShopifyUserErrorSortInput = {
  readonly field: InputMaybe<SortOrderEnum>;
  readonly message: InputMaybe<SortOrderEnum>;
};

type ShopifyVideo = Node & ShopifyMedia & {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly filename: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mediaContentType: ShopifyMediaContentType;
  readonly mediaErrors: ReadonlyArray<ShopifyMediaError>;
  readonly originalSource: Maybe<ShopifyVideoSource>;
  readonly parent: Maybe<Node>;
  readonly preview: Maybe<ShopifyMediaPreviewImage>;
  readonly shopifyId: Scalars['String'];
  readonly sources: ReadonlyArray<ShopifyVideoSource>;
  readonly status: ShopifyMediaStatus;
};

type ShopifyVideoConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyVideoEdge>;
  readonly group: ReadonlyArray<ShopifyVideoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyVideo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyVideoConnection_distinctArgs = {
  field: ShopifyVideoFieldSelector;
};


type ShopifyVideoConnection_groupArgs = {
  field: ShopifyVideoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyVideoConnection_maxArgs = {
  field: ShopifyVideoFieldSelector;
};


type ShopifyVideoConnection_minArgs = {
  field: ShopifyVideoFieldSelector;
};


type ShopifyVideoConnection_sumArgs = {
  field: ShopifyVideoFieldSelector;
};

type ShopifyVideoEdge = {
  readonly next: Maybe<ShopifyVideo>;
  readonly node: ShopifyVideo;
  readonly previous: Maybe<ShopifyVideo>;
};

type ShopifyVideoFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly filename: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mediaContentType: InputMaybe<FieldSelectorEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFieldSelector>;
  readonly originalSource: InputMaybe<ShopifyVideoSourceFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFieldSelector>;
  readonly shopifyId: InputMaybe<FieldSelectorEnum>;
  readonly sources: InputMaybe<ShopifyVideoSourceFieldSelector>;
  readonly status: InputMaybe<FieldSelectorEnum>;
};

type ShopifyVideoFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mediaContentType: InputMaybe<ShopifyMediaContentTypeQueryOperatorInput>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorFilterListInput>;
  readonly originalSource: InputMaybe<ShopifyVideoSourceFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageFilterInput>;
  readonly shopifyId: InputMaybe<StringQueryOperatorInput>;
  readonly sources: InputMaybe<ShopifyVideoSourceFilterListInput>;
  readonly status: InputMaybe<ShopifyMediaStatusQueryOperatorInput>;
};

type ShopifyVideoGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ShopifyVideoEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ShopifyVideoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ShopifyVideo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ShopifyVideoGroupConnection_distinctArgs = {
  field: ShopifyVideoFieldSelector;
};


type ShopifyVideoGroupConnection_groupArgs = {
  field: ShopifyVideoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ShopifyVideoGroupConnection_maxArgs = {
  field: ShopifyVideoFieldSelector;
};


type ShopifyVideoGroupConnection_minArgs = {
  field: ShopifyVideoFieldSelector;
};


type ShopifyVideoGroupConnection_sumArgs = {
  field: ShopifyVideoFieldSelector;
};

type ShopifyVideoSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly filename: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mediaContentType: InputMaybe<SortOrderEnum>;
  readonly mediaErrors: InputMaybe<ShopifyMediaErrorSortInput>;
  readonly originalSource: InputMaybe<ShopifyVideoSourceSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preview: InputMaybe<ShopifyMediaPreviewImageSortInput>;
  readonly shopifyId: InputMaybe<SortOrderEnum>;
  readonly sources: InputMaybe<ShopifyVideoSourceSortInput>;
  readonly status: InputMaybe<SortOrderEnum>;
};

type ShopifyVideoSource = {
  readonly format: Scalars['String'];
  readonly height: Scalars['Int'];
  readonly mimeType: Scalars['String'];
  readonly url: Scalars['String'];
  readonly width: Scalars['Int'];
};

type ShopifyVideoSourceFieldSelector = {
  readonly format: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ShopifyVideoSourceFilterInput = {
  readonly format: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ShopifyVideoSourceFilterListInput = {
  readonly elemMatch: InputMaybe<ShopifyVideoSourceFilterInput>;
};

type ShopifyVideoSourceSortInput = {
  readonly format: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ShopifyWeightUnit =
  | 'GRAMS'
  | 'KILOGRAMS'
  | 'OUNCES'
  | 'POUNDS';

type ShopifyWeightUnitQueryOperatorInput = {
  readonly eq: InputMaybe<ShopifyWeightUnit>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<ShopifyWeightUnit>>>;
  readonly ne: InputMaybe<ShopifyWeightUnit>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<ShopifyWeightUnit>>>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly bannerLink: Maybe<Scalars['String']>;
  readonly bannerMessage: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly featuredCollectionTitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly bannerLink: InputMaybe<FieldSelectorEnum>;
  readonly bannerMessage: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly featuredCollectionTitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly bannerLink: InputMaybe<StringQueryOperatorInput>;
  readonly bannerMessage: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly featuredCollectionTitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly bannerLink: InputMaybe<SortOrderEnum>;
  readonly bannerMessage: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly featuredCollectionTitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AboutPageQueryVariables = Exact<{ [key: string]: never; }>;


type AboutPageQuery = { readonly site: { readonly siteMetadata: { readonly url: string | null } | null } | null, readonly image: { readonly childImageSharp: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly markdownRemark: { readonly html: string | null, readonly frontmatter: { readonly date: string | null, readonly title: string | null, readonly description: string | null, readonly image_url: string | null } | null } | null };

type BlogPostByIDQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type BlogPostByIDQuery = { readonly site: { readonly siteMetadata: { readonly url: string | null } | null } | null, readonly avatar: { readonly childImageSharp: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly markdownRemark: { readonly id: string, readonly html: string | null, readonly fields: { readonly slug: string | null, readonly readingTime: { readonly text: string | null } | null } | null, readonly frontmatter: { readonly date: string | null, readonly title: string | null, readonly description: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly pinned: boolean | null, readonly image: string | null } | null } | null };

type BlogQueryQueryVariables = Exact<{ [key: string]: never; }>;


type BlogQueryQuery = { readonly allMarkdownRemark: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly readingTime: { readonly text: string | null } | null } | null, readonly frontmatter: { readonly slug: string | null, readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly templateKey: string | null, readonly description: string | null, readonly pinned: boolean | null, readonly date: string | null } | null } }> } };

type CollectionQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type CollectionQuery = { readonly site: { readonly siteMetadata: { readonly url: string | null } | null } | null, readonly collection: { readonly __typename: 'ShopifyCollection', readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } | null };

type FeaturedMediaFragment = { readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null };

type FeaturedShopifyCollectionFragment = { readonly __typename: 'ShopifyCollection', readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> };

type FilmPageQueryVariables = Exact<{ [key: string]: never; }>;


type FilmPageQuery = { readonly film: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } }> } };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type HeadingQueryQueryVariables = Exact<{ [key: string]: never; }>;


type HeadingQueryQuery = { readonly site: { readonly siteMetadata: { readonly title: string | null, readonly description: string | null } | null } | null };

type IndexPageQueryVariables = Exact<{ [key: string]: never; }>;


type IndexPageQuery = { readonly featuredFilmCollection: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } }> }, readonly featuredCollection: { readonly __typename: 'ShopifyCollection', readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } | null, readonly featuredCollectionTwo: { readonly __typename: 'ShopifyCollection', readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } | null };

type MediaFragment = { readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null };

type OlympusFilmPageQueryVariables = Exact<{ [key: string]: never; }>;


type OlympusFilmPageQuery = { readonly film: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } }> } };

type PhotographyPageQueryVariables = Exact<{ [key: string]: never; }>;


type PhotographyPageQuery = { readonly featuredCollection: { readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } | null, readonly collections: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly handle: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } }> } };

type PostsPageQueryVariables = Exact<{ [key: string]: never; }>;


type PostsPageQuery = { readonly posts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null, readonly readingTime: { readonly text: string | null } | null } | null, readonly frontmatter: { readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly templateKey: string | null, readonly description: string | null, readonly pinned: boolean | null, readonly private: boolean | null, readonly date: string | null } | null } }> } };

type ProductFragment = { readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null };

type ProductByIDQueryVariables = Exact<{
  id: Scalars['String'];
  collectionId: InputMaybe<Scalars['String']>;
  featuredCollectionTitle: InputMaybe<Scalars['String']>;
}>;


type ProductByIDQuery = { readonly product: { readonly __typename: 'ShopifyProduct', readonly description: string, readonly createdAt: string, readonly updatedAt: string, readonly tags: ReadonlyArray<string>, readonly id: string, readonly handle: string, readonly title: string, readonly collections: ReadonlyArray<{ readonly id: string, readonly handle: string, readonly title: string }>, readonly variants: ReadonlyArray<{ readonly id: string, readonly shopifyId: string, readonly price: number, readonly sku: string | null, readonly title: string, readonly availableForSale: boolean, readonly product: { readonly id: string }, readonly image: { readonly originalSrc: string, readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }> }>, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null } | null, readonly collection: { readonly __typename: 'ShopifyCollection', readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } | null, readonly featuredCollection: { readonly __typename: 'ShopifyCollection', readonly id: string, readonly title: string, readonly handle: string, readonly description: string, readonly products: ReadonlyArray<{ readonly __typename: 'ShopifyProduct', readonly id: string, readonly handle: string, readonly title: string, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null }> } | null };

type ProductDetailsFragment = { readonly __typename: 'ShopifyProduct', readonly description: string, readonly createdAt: string, readonly updatedAt: string, readonly tags: ReadonlyArray<string>, readonly id: string, readonly handle: string, readonly title: string, readonly collections: ReadonlyArray<{ readonly id: string, readonly handle: string, readonly title: string }>, readonly variants: ReadonlyArray<{ readonly id: string, readonly shopifyId: string, readonly price: number, readonly sku: string | null, readonly title: string, readonly availableForSale: boolean, readonly product: { readonly id: string }, readonly image: { readonly originalSrc: string, readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }> }>, readonly media: ReadonlyArray<{ readonly image: { readonly gatsbyImageData: Record<string, unknown> | null } | null } | {}>, readonly metafields: ReadonlyArray<{ readonly key: string, readonly value: string }>, readonly priceRangeV2: { readonly minVariantPrice: { readonly amount: number, readonly currencyCode: ShopifyCurrencyCode } }, readonly featuredMedia: { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | { readonly id: string, readonly preview: { readonly image: { readonly src: string, readonly altText: string | null, readonly width: number | null, readonly height: number | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } | null } | null };

type ProjectByIDQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type ProjectByIDQuery = { readonly markdownRemark: { readonly id: string, readonly frontmatter: { readonly date: string | null, readonly title: string | null, readonly description: string | null, readonly tags: ReadonlyArray<string | null> | null } | null } | null };

type ProjectsPageQueryVariables = Exact<{ [key: string]: never; }>;


type ProjectsPageQuery = { readonly projects: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly templateKey: string | null, readonly description: string | null, readonly image_url: string | null, readonly url: string | null, readonly cta: string | null, readonly github_url: string | null, readonly date: string | null } | null } }> } };

type TagPageQueryVariables = Exact<{
  tag: InputMaybe<Scalars['String']>;
}>;


type TagPageQuery = { readonly site: { readonly siteMetadata: { readonly title: string | null } | null } | null, readonly allMarkdownRemark: { readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null, readonly readingTime: { readonly text: string | null } | null } | null, readonly frontmatter: { readonly date: string | null, readonly title: string | null, readonly description: string | null, readonly tags: ReadonlyArray<string | null> | null } | null } }> } };


}
